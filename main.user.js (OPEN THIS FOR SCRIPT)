// ==UserScript==
// @name         GeoFS Military RP Chat (Socket.IO + Shareable)
// @namespace    http://tampermonkey.net/
// @version      1.1
// @description  Military RP chat using Socket.IO server. Open with T, change username, isolated messages.
// @match        https://www.geo-fs.com/geofs.php*
// @grant        none
// @require      https://cdn.socket.io/4.8.0/socket.io.min.js
// ==/UserScript==

(function() {
    'use strict';

    // ---- Config ----
    const SERVER_URL = "https://mrp-chat.onrender.com"; // <- your Render server URL
    const MAX_MESSAGES = 20;

    // Connect to Socket.IO server
    const socket = io(SERVER_URL);

    // ---- Username ----
    let username = localStorage.getItem("milrpChatUser") || prompt("Enter your Military RP username:") || "Anonymous";
    localStorage.setItem("milrpChatUser", username);

    // ---- UI ----
    const style = document.createElement("style");
    style.textContent = `
    #milrp-chat-btn {
        position: fixed; bottom: 20px; right: 20px; z-index: 9999;
        background: #253356; color: white; padding: 12px 18px; border-radius: 8px; cursor: pointer; border: none;
    }
    #milrp-chat-win {
        display: none; position: fixed; bottom: 70px; right: 20px; z-index: 10000;
        width: 320px; background: #253356; color: white; border-radius: 10px;
        padding: 10px; box-shadow: 0 0 14px #0008;
    }
    #milrp-messages {
        height: 180px; overflow-y: auto; margin-bottom: 8px;
        background: #152040; padding: 5px; border-radius: 7px;
        font-size: 13px; line-height: 1.3em;
    }
    #milrp-input { width: 82%; }
    #milrp-send { width: 15%; margin-left: 2%; background: #4067b6; color: white; border: none; border-radius: 5px; }
    #milrp-username { padding: 2px 0; color: #d0ddff; text-align: left; font-size: 12px; }
    #milrp-change-user {
        background: #2e4372; color: white; border: none; border-radius: 5px;
        padding: 2px 6px; font-size: 11px; margin-left: 5px; cursor: pointer;
    }
    #milrp-overlay {
        position: fixed; bottom: 50%; left: 50%; transform: translate(-50%, 50%);
        background: rgba(20,20,40,0.85); color: white; padding: 6px 10px;
        border-radius: 6px; z-index: 20000; font-size: 13px; display: none;
    }
    `;
    document.head.appendChild(style);

    document.body.insertAdjacentHTML("beforeend", `
        <button id="milrp-chat-btn">Military RP Chat</button>
        <div id="milrp-chat-win">
            <div>
                <b>Military RP Chat</b>
                <span style="float:right;cursor:pointer;" id="milrp-close">&#10006;</span>
            </div>
            <div id="milrp-username">
                <b>User:</b> <span id="milrp-name">${username}</span>
                <button id="milrp-change-user">Change</button>
            </div>
            <div id="milrp-messages"></div>
            <input id="milrp-input" placeholder="Type message..." maxlength="100"/>
            <button id="milrp-send">Send</button>
        </div>
        <div id="milrp-overlay">Controls Disabled (Chat Active)</div>
    `);

    const chatBtn = document.getElementById("milrp-chat-btn");
    const chatWin = document.getElementById("milrp-chat-win");
    const closeBtn = document.getElementById("milrp-close");
    const input = document.getElementById("milrp-input");
    const sendBtn = document.getElementById("milrp-send");
    const messagesEl = document.getElementById("milrp-messages");
    const overlay = document.getElementById("milrp-overlay");
    const nameSpan = document.getElementById("milrp-name");
    const changeUserBtn = document.getElementById("milrp-change-user");

    // ---- Change Username ----
    changeUserBtn.onclick = () => {
        const newName = prompt("Enter new username:", username);
        if (newName && newName.trim() !== "") {
            username = newName.trim();
            nameSpan.textContent = username;
            localStorage.setItem("milrpChatUser", username);
        }
    };

    // ---- Messages ----
    const messages = [];

    function renderMessages() {
        messagesEl.innerHTML = messages.map(m => `<div>${m}</div>`).join("");
        messagesEl.scrollTop = messagesEl.scrollHeight;
    }

    function sendMessage() {
        const txt = input.value.trim();
        if (!txt) return;
        const msg = `[${username}] ${txt}`;
        socket.emit("chat message", msg);
        messages.push(msg);
        if (messages.length > MAX_MESSAGES) messages.shift();
        input.value = "";
        renderMessages();
    }

    sendBtn.onclick = sendMessage;

    socket.on("chat message", (msg) => {
        messages.push(msg);
        if (messages.length > MAX_MESSAGES) messages.shift();
        renderMessages();
    });

    // ---- Chat Open/Close ----
    function disableGeoFSInput(state) { overlay.style.display = state ? "block" : "none"; }
    function openChat() { chatWin.style.display = "block"; input.focus(); disableGeoFSInput(true); }
    function closeChat() { chatWin.style.display = "none"; disableGeoFSInput(false); }

    chatBtn.onclick = openChat;
    closeBtn.onclick = closeChat;
    input.addEventListener("focus", () => disableGeoFSInput(true));
    input.addEventListener("blur", () => disableGeoFSInput(false));

    // ---- Keyboard ----
    window.addEventListener("keydown", function(e) {
        if (document.activeElement === input) {
            e.stopImmediatePropagation();
            if (e.key === "Enter") sendMessage();
            return;
        }

        if (e.key.toLowerCase() === "t" && chatWin.style.display === "none") {
            openChat();
            e.preventDefault();
            e.stopPropagation();
        }

        if (e.key === "Escape" && chatWin.style.display === "block") {
            closeChat();
            e.preventDefault();
            e.stopPropagation();
        }
    }, true);

})();
