// ==UserScript==
// @name         GeoFS Military RP Chat (P2P via Render)
// @namespace    http://tampermonkey.net/
// @version      3.3
// @description  Multiplayer RP chat using Render WebSocket server. Disables GeoFS keybinds only while typing in chat.
// @match        https://www.geo-fs.com/*
// @grant        none
// ==/UserScript==

(function() {
    'use strict';

    // WebSocket server URL (WSS)
    const SERVER_URL = "wss://mrp-chat-1.onrender.com";

    // Username setup
    let username = localStorage.getItem("milrpChatUser") || prompt("Enter your RP username:") || "Anonymous";
    localStorage.setItem("milrpChatUser", username);

    // Add CSS for button and chat window
    const style = document.createElement("style");
    style.textContent = `
        #milrp-chat-btn {
            position: fixed; bottom: 20px; right: 20px; z-index: 9999;
            background: #253356; color: white; padding: 12px 18px; border-radius: 8px;
            cursor: pointer; border: none; font-weight: bold; box-shadow: 0 0 8px #0006;
        }
        #milrp-chat-win {
            display: none; position: fixed; bottom: 70px; right: 20px; z-index: 10000;
            width: 320px; background: #253356; color: white; border-radius: 10px;
            padding: 10px; box-shadow: 0 0 14px #0008;
        }
        #milrp-messages {
            height: 180px; overflow-y: auto; margin-bottom: 8px;
            background: #152040; padding: 5px; border-radius: 7px;
            font-size: 13px; line-height: 1.3em;
        }
        #milrp-input { width: 70%; }
        #milrp-send { width: 28%; background: #4067b6; color: white; border: none; border-radius: 5px; }
        #milrp-username { padding: 2px 0; color: #d0ddff; text-align: left; font-size: 12px; }
        #milrp-status { font-size: 11px; color: #d0ffb0; margin-left: 5px; }
    `;
    document.head.appendChild(style);

    // Add HTML for chat button & window
    document.body.insertAdjacentHTML("beforeend", `
        <button id="milrp-chat-btn">Military RP Chat</button>
        <div id="milrp-chat-win">
            <div><b>Military RP Chat</b> <span style="float:right;cursor:pointer;" id="milrp-close">âœ–</span></div>
            <div id="milrp-username"><b>User:</b> ${username} <span id="milrp-status">Connecting...</span></div>
            <div id="milrp-messages"></div>
            <input id="milrp-input" placeholder="Type message..." maxlength="100"/>
            <button id="milrp-send">Send</button>
        </div>
    `);

    const chatBtn = document.getElementById("milrp-chat-btn");
    const chatWin = document.getElementById("milrp-chat-win");
    const closeBtn = document.getElementById("milrp-close");
    const input = document.getElementById("milrp-input");
    const sendBtn = document.getElementById("milrp-send");
    const messagesEl = document.getElementById("milrp-messages");
    const statusEl = document.getElementById("milrp-status");

    const messages = [];

    function renderMessages() {
        messagesEl.innerHTML = messages.map(m => `<div>${m}</div>`).join("");
        messagesEl.scrollTop = messagesEl.scrollHeight;
    }

    function openChat() { 
        chatWin.style.display = "block"; 
        input.focus(); 
    }
    function closeChat() { 
        chatWin.style.display = "none"; 
    }
    chatBtn.onclick = openChat;
    closeBtn.onclick = closeChat;

    function sendMessage() {
        const txt = input.value.trim();
        if (!txt || socket.readyState !== WebSocket.OPEN) return;
        const msg = { user: username, text: txt };
        socket.send(JSON.stringify(msg));
        input.value = "";
    }

    sendBtn.onclick = sendMessage;
    input.addEventListener("keydown", (e) => { if (e.key === "Enter") sendMessage(); });

    // KEYBIND BLOCKER: disables only known flying controls while typing in the chat input
    function blockGeoFSKeys(e) {
        if (chatWin.style.display === "block" && document.activeElement === input) {
            // GeoFS controls ("flying" keybinds); add/remove as needed
            const flyingKeys = [
                "e", "w", "a", "s", "d", "q", "z", "x", "r", "f",
                "c", "v", "b", "t", "g", "y", "u", "i", "o", "p", "l",
                "m", "n"
            ];
            // Only block if NO modifier (Shift, Ctrl, Alt, Meta) is held;
            // typing + editing keys and symbols are never blocked
            if (
                flyingKeys.includes(e.key.toLowerCase()) &&
                !e.ctrlKey && !e.metaKey && !e.altKey && !e.shiftKey
            ) {
                e.stopPropagation();
                e.preventDefault();
            }
        }
    }
    window.addEventListener("keydown", blockGeoFSKeys, true);
    window.addEventListener("keyup", blockGeoFSKeys, true);

    // Connect to WebSocket server
    const socket = new WebSocket(SERVER_URL);

    socket.addEventListener("open", () => { statusEl.textContent = "Connected"; });
    socket.addEventListener("close", () => { statusEl.textContent = "Disconnected"; });
    socket.addEventListener("error", () => { statusEl.textContent = "Error"; });

    socket.addEventListener("message", (event) => {
        try {
            const msg = JSON.parse(event.data);
            if (msg.user && msg.text) {
                messages.push(`[${msg.user}] ${msg.text}`);
                if (messages.length > 20) messages.shift();
                renderMessages();
            }
        } catch(e){ console.error("Malformed message", event.data); }
    });
})();
